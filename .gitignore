# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# React build
frontend/build/
frontend/dist/

# Logs
logs/
*.log
test_logs/
api.log

# Test results
test_results/
!test_results/integration_test_report.json
!test_results/integration_test_summary.txt

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Docker
.dockerignore

# Temporary files
*.tmp
*.temp

# Model files (can be large)
*.pth
*.pt
*.onnx
*.pb
*.h5
*.safetensors
models/
uploads/
test_models/
test_storage/

# Configuration files with secrets
.env.local
.env.production
config/secrets.json

# Frontend test reports
frontend/coverage/

# Scripts - keep only essential .sh files (deploy.sh, backup.sh, validate-deployment.sh)
scripts/run_deployment_validation.py
scripts/run_integration_tests.py
scripts/init-db.sql
scripts/test-deployment.sh

# Debug scripts
debug_integration.py

# Development documentation (internal notes, not for end users)
GEMINI.md
INTEGRATION_SUMMARY.md
INTEGRATION_TEST_FIXES_SUMMARY.md
ORGANIZATION_SUMMARY.md
docs/testing/
docs/QUICK_REFERENCE.md
docs/STRUCTURE.md

# Test documentation (development artifacts, not for end users)
tests/integration/API_INTEGRATION_TEST_SUMMARY.md
tests/integration/E2E_IMPLEMENTATION_SUMMARY.md
tests/integration/E2E_TEST_REQUIREMENTS_MAPPING.md
tests/deployment/README.md

# Redundant integration tests (overlapping coverage)
tests/integration/test_e2e_requirements_validation.py
tests/integration/test_comprehensive_e2e_requirements.py
tests/integration/test_requirements_coverage_validation.py
tests/integration/test_final_integration_validation.py
tests/integration/test_e2e_edge_cases_and_scenarios.py
tests/integration/run_comprehensive_e2e_tests.py

# Test analysis documentation
INTEGRATION_TEST_ANALYSIS.md
FRONTEND_TEST_ANALYSIS.md
CLEANUP_SUMMARY.md
frontend/E2E_TEST_SUMMARY.md

# Redundant frontend tests (overlapping with E2E tests)
frontend/src/tests/integration/App.integration.test.tsx

# Quick E2E test files (development/testing artifacts)
quick_e2e_test.py
E2E_TEST_RESULTS.md
